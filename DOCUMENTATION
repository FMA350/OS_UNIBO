PCB

struct pcb_t *proc_init(void): 	inizializza la lista libera per i PCB aggiungendo i processi presenti
								nel vettore process. 
								Ritorna il puntatore alla radice dell'albero dei processi (process[0])
				
struct pcb_t *proc_alloc(struct pcb_t *p_parent): 	alloca un processo figlio del genitore p_parent.
													Se p_parent è NULL o se la lista libera per i PCB
													è vuota, allora ritorna NULL.
													Altrimenti inserisce il processo tra i figli
													di p_parent, aggiorna il campo p_parent del 
													processo appena creato e lo rimuove dalla lista libera.
													Ritorna il processo allocato.
													
int proc_delete(struct pcb_t *oldproc): Se oldproc non è la, e se non ha ne figli e nè threads 
										(p_children e p_threads vuote) aggiorna il puntatore al padre a NULL,
										rimuove il processo dalla lista dei figli e lo reinserisce nella lista
										libera dei PCB.
										In caso dierrore ritorna -1, altrimenti 0.
										
inline struct pcb_t *proc_firstchild(struct pcb_t *proc): 	Se proc ha un figlio, ritorna un puntatore al primo figlio.
															Altrimenti ritorna NULL.
														
inline struct tcb_t *proc_firstthread(struct pcb_t *proc): 	Se proc ha un thread, ritorna un puntatore al primo thread.
															Altrimenti ritorna NULL.
															

		
									
Note implementative per i PCB:
	- La lista dei fratelli (siblings) del processo root viene utilizzata come lista libera per i PCB
	
	- Tutti i processi della lista libera hanno il padre che punta a NULL
	
	- proc_alloc non inizializza le liste p_children e p_threads perchè già inizializzate da proc_init al 
	  momento dell' inizializzazione della lista libera e da proc_delete quando un processo viene eliminato.
	  
	  
TCB

void thread_init(void): Inizializza la lista libera per i TCB aggiungendo i TCB presenti nel
						vettore thread. I thread appena inseriti nella lista non aspettano messaggi
						(t_wait4sender=NULL), non appartengono ad alcun processo (t_pcb=NULL)
						e non sono schedulabili (t_status=T_STATUS_NONE).
						La funzione inizializza anche le liste t_sched e t_msgq per ogni TCB
	
struct tcb_t *thread_alloc(struct pcb_t *process): 	alloca un thread per il processo process.
													Se il processo è NULL oppure se la lista libera dei TCB
													è vuota, ritorna NULL.
													Altrimenti rimuove il TCB dalla lista libera, lo aggiunge
													alla lista dei threads del padre e setta t_status=T_STATUS_READY
													per indicare che il thread è schedulabile.
													Ritorna il thread creato.
													
thread_free(struct tcb_t *oldthread): 	Se la coda messaggi di oldthread è piena, ritorna -1.
										Altrimenti rimuove il thread dalla lista dei thread del processo
										a cui appartiene e lo reinscerisce nella lista libera dei TCB con 
										t_status=T_STATUS_NONE.
						
inline void thread_enqueue(struct tcb_t *new, struct list_head *queue):	accoda il TCB new alla lista di 
																		scheduling il cui punto di ingresso è queue
																		
struct tcb_t *thread_qhead(struct list_head *queue):	se queue non è vuota, ritorna il primo TCB di queue
														altrimenti ritorna NULL. La funzione non modifica queue
														
struct tcb_t *thread_dequeue(struct list_head *queue): 	se la coda queue non è vuota, rimuove dalla coda il primo
														TCB e lo ritorna. Altrimenti ritorna NULL.
														
MESSAGGI													
														
void msgq_init(void): 	Inizializza la lista libera per i messaggi, aggiungendo tutti i msg_t presenti
						nel vettore message.
						
int msgq_add(struct tcb_t *sender, struct tcb_t *destination, uintptr_t value): Se sender o destination sono nulli oppure se la lista libera
																				dei messaggi è vuota ritorna -1.
																				Altrimenti aggiunge un messaggio con m_value=value
																				e m_sender=sender alla coda di messaggi del thread
																				destination.
																				
int msgq_get(struct tcb_t **sender, struct tcb_t *destination, uintptr_t *value): 	se sender è nullo, e la coda dei messaggi 
																					di destination non è vuota, rimuove dalla coda
																					il primo messaggio e inserisce il valore in value.
																					e ritorna 0.
																					Se la coda è vuota ritorna -1.
																					se sender non è nullo e *sender è nullo,
																					e se la cida dei messaggi
																					di destination non è vuota, rimuove dalla coda
																					il primo messaggio, inserisce il valore in value,
																					l'indirizzo del TCB mittente in *sender 
																					e ritorna 0.
																					Se la coda è vuota ritorna -1.
																					Se sia sender che *sender non sono nullli e se la coda
																					dei messaggi non è vuota, 
																					Rimuove dalla coda dei messaggi il primo 
																					messaggio inviato da *sender, inserisce 
																					il valore in value e ritorna 0.
																					Se la coda è vuota o se non viene trovato o se
																					la coda dei messaggi è vuota, ritorna -1.
																					
																					
																					
																		
	
										
						