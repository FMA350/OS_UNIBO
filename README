Link utili (solo per development)

Accedere ad i registri della CPU con linguaggio C e assembly:
http://stackoverflow.com/questions/3022046/is-it-possible-to-access-32-bit-registers-in-c
http://stackoverflow.com/questions/2582629/how-to-determine-values-saved-on-the-stack/2582902#2582902
https://gcc.gnu.org/onlinedocs/gcc/Global-Register-Variables.html

https://cs.unibo.it/~renzo/so/amikaya11/

MIKABOO PT.1 README
=====================

BUILDING
=========



arm-none-eabi-gcc -mcpu=arm7tdmi -c mikabooq.c -o mikabooq.o -I . -include <stdint.h>
arm-none-eabi-gcc -mcpu=arm7tdmi -c p1test.c -o p1test.o -I . -I /usr/include/uarm

arm-none-eabi-ld \
   -T /usr/include/uarm/ldscripts/elf32ltsarm.h.uarmcore.x \
   -o p1test.elf /usr/include/uarm/crtso.o \
   /usr/include/uarm/libuarm.o p1test.o mikabooq.o

elf2uarm -k p1test.elf

MIKABOO PT.2 README
=====================

<<<<<<< HEAD
Il file main.c è relativo alla fase 2
=======
Il file main.c è relativo alla fase 2

tesi è descrive un sistema operativo che ha molte parti in comune con ciò che stiamo
realizzando noi. La sezione a p. 123 è piuttosto importante per capire come agire.

NOTA: ho aggiunto '#include <uARMtypes.h>' nel file mikabooq.h; serve per la definizione
		di state_t, il quale è stato decommentato nella struttura tcb_t

Il main esegue in system mode con fast & normal interrupts disabilitati (i software interrupt sono abilitati perché sono exceptions):
	attenzione in fase di testing
